<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0">
  <channel>
    <atom:link href="https://x.com/geoffreylitt/rss" rel="self" type="application/rss+xml" />
    <title>Geoffrey Litt / @geoffreylitt</title>
    <link>https://x.com/geoffreylitt</link>
    <description>Twitter feed for: @geoffreylitt. Generated by nitter.privacydev.net
</description>
    <language>en-us</language>
    <ttl>40</ttl>
    <image>
      <title>Geoffrey Litt / @geoffreylitt</title>
      <link>https://x.com/geoffreylitt</link>
      <url>https://x.com/pic/pbs.twimg.com%2Fprofile_images%2F722626068293763072%2F4erM-SPN_400x400.jpg</url>
      <width>128</width>
      <height>128</height>
    </image>
      <item>
        <title>RT by @geoffreylitt: 16/ bonus tactical tip: here&apos;s the workflow I use for Cursor + Composer on complex changes to keep quality high.

key idea: move conservatively, catch mistakes early,  &quot;slow is smooth, smooth is fast&quot; -- and &quot;slow&quot; by AI standards is still fast by manual coding standards. you really wanna avoid going off the rails at any point.

- start with detailed prompt up front, like a ticket for a junior eng. think thru the desired UX and the architecture, identify tricky bits that require care.
- end first message with &quot;ask me clarifying questions before proceeding&quot;
- clear up the questions.
- then say &quot;show me a plan before you code&quot;
- review the plan carefully and give feedback. you should catch bugs and weird misunderstandings here, not later!
- then once the plan is done, tell it to implement (all at once or in testable stages, depending on size)
- if the result is close, you can iterate a couple times
- if it totally went off the rails, i recommend bailing out: start over, or do the change yourself. don&apos;t try to iterate out of a confused place in the chat.

basically in summary, apply the classic skillset of &quot;senior eng working with junior eng&quot;!

this may seem tedious at first, but in my experience once you get the hang of it, it feels pretty natural.</title>
        <dc:creator>@geoffreylitt</dc:creator>
        <description><![CDATA[<p>16/ bonus tactical tip: here's the workflow I use for Cursor + Composer on complex changes to keep quality high.<br>
<br>
key idea: move conservatively, catch mistakes early,  "slow is smooth, smooth is fast" -- and "slow" by AI standards is still fast by manual coding standards. you really wanna avoid going off the rails at any point.<br>
<br>
- start with detailed prompt up front, like a ticket for a junior eng. think thru the desired UX and the architecture, identify tricky bits that require care.<br>
- end first message with "ask me clarifying questions before proceeding"<br>
- clear up the questions.<br>
- then say "show me a plan before you code"<br>
- review the plan carefully and give feedback. you should catch bugs and weird misunderstandings here, not later!<br>
- then once the plan is done, tell it to implement (all at once or in testable stages, depending on size)<br>
- if the result is close, you can iterate a couple times<br>
- if it totally went off the rails, i recommend bailing out: start over, or do the change yourself. don't try to iterate out of a confused place in the chat.<br>
<br>
basically in summary, apply the classic skillset of "senior eng working with junior eng"!<br>
<br>
this may seem tedious at first, but in my experience once you get the hang of it, it feels pretty natural.</p>
<img src="https://x.com/pic/media%2FGjm6vVkWIAE1Hxr.jpg" style="max-width:250px;" />
<img src="https://x.com/pic/media%2FGjm61RHWMAAr7rj.jpg" style="max-width:250px;" />
<img src="https://x.com/pic/media%2FGjm61j5X0AAxQfe.jpg" style="max-width:250px;" />]]></description>
        <pubDate>Wed, 12 Feb 2025 18:47:33 GMT</pubDate>
        <guid>https://x.com/geoffreylitt/status/1889748193744920580#m</guid>
        <link>https://x.com/geoffreylitt/status/1889748193744920580#m</link>
      </item>
      <item>
        <title>R to @geoffreylitt: 15/ Anyway, that&apos;s the lens I&apos;m finding helpful these days. tldr: in the wild west, speed wins, and AI is fast. So we can thoughtfully apply AI to make better prototypes.

If you&apos;re using similar techniques would be curious how you think about it.</title>
        <dc:creator>@geoffreylitt</dc:creator>
        <description><![CDATA[<p>15/ Anyway, that's the lens I'm finding helpful these days. tldr: in the wild west, speed wins, and AI is fast. So we can thoughtfully apply AI to make better prototypes.<br>
<br>
If you're using similar techniques would be curious how you think about it.</p>
<img src="https://x.com/pic/media%2FGjmNIYtWUAAZKI4.jpg" style="max-width:250px;" />]]></description>
        <pubDate>Wed, 12 Feb 2025 15:25:38 GMT</pubDate>
        <guid>https://x.com/geoffreylitt/status/1889697378740920539#m</guid>
        <link>https://x.com/geoffreylitt/status/1889697378740920539#m</link>
      </item>
      <item>
        <title>R to @geoffreylitt: 14/ As the models improve, it&apos;s even feeling like the combo is possible sometimes: move faster than ever before, at higher quality.

I&apos;m cautious with the super high speeds though: preserving creative agency does require a lot of iteration and pondering the essential problem.</title>
        <dc:creator>@geoffreylitt</dc:creator>
        <description><![CDATA[<p>14/ As the models improve, it's even feeling like the combo is possible sometimes: move faster than ever before, at higher quality.<br>
<br>
I'm cautious with the super high speeds though: preserving creative agency does require a lot of iteration and pondering the essential problem.</p>
<img src="https://x.com/pic/media%2FGjmM1oRWMAAeoFS.jpg" style="max-width:250px;" />]]></description>
        <pubDate>Wed, 12 Feb 2025 15:25:38 GMT</pubDate>
        <guid>https://x.com/geoffreylitt/status/1889697376262119811#m</guid>
        <link>https://x.com/geoffreylitt/status/1889697376262119811#m</link>
      </item>
      <item>
        <title>R to @geoffreylitt: 13/ It does take constant vigilance to pull this off. When I&apos;m doing serious UI prototyping I try to maintain a clear separation where I&apos;m driving the big ideas and the UI details, and the AI&apos;s role is only implementation assistance.</title>
        <dc:creator>@geoffreylitt</dc:creator>
        <description><![CDATA[<p>13/ It does take constant vigilance to pull this off. When I'm doing serious UI prototyping I try to maintain a clear separation where I'm driving the big ideas and the UI details, and the AI's role is only implementation assistance.</p>]]></description>
        <pubDate>Wed, 12 Feb 2025 15:25:37 GMT</pubDate>
        <guid>https://x.com/geoffreylitt/status/1889697374781505600#m</guid>
        <link>https://x.com/geoffreylitt/status/1889697374781505600#m</link>
      </item>
      <item>
        <title>R to @geoffreylitt: 12/ OK, but what about the UI itself? am I abdicating too much responsibility to the AI?

Perhaps. I do worry about this a lot... But I actually think the opposite may be true? I can be more attentive to UI detail when I&apos;m not furiously slinging around code.</title>
        <dc:creator>@geoffreylitt</dc:creator>
        <description><![CDATA[<p>12/ OK, but what about the UI itself? am I abdicating too much responsibility to the AI?<br>
<br>
Perhaps. I do worry about this a lot... But I actually think the opposite may be true? I can be more attentive to UI detail when I'm not furiously slinging around code.</p>
<img src="https://x.com/pic/media%2FGjmJbN-XYAA4eeh.png" style="max-width:250px;" />]]></description>
        <pubDate>Wed, 12 Feb 2025 15:25:37 GMT</pubDate>
        <guid>https://x.com/geoffreylitt/status/1889697372462039525#m</guid>
        <link>https://x.com/geoffreylitt/status/1889697372462039525#m</link>
      </item>
      <item>
        <title>R to @geoffreylitt: 11/ This is not one sentence prompts. It&apos;s long detailed prompts, iteration, code review. In the weeds!

I can make a proper plan for how something should work... and then the AI executes it in minutes! So we&apos;re still moving fast enough for prototyping.</title>
        <dc:creator>@geoffreylitt</dc:creator>
        <description><![CDATA[<p>11/ This is not one sentence prompts. It's long detailed prompts, iteration, code review. In the weeds!<br>
<br>
I can make a proper plan for how something should work... and then the AI executes it in minutes! So we're still moving fast enough for prototyping.</p>
<img src="https://x.com/pic/media%2FGjmIkzfXcAAfuzP.jpg" style="max-width:250px;" />]]></description>
        <pubDate>Wed, 12 Feb 2025 15:25:36 GMT</pubDate>
        <guid>https://x.com/geoffreylitt/status/1889697369337237523#m</guid>
        <link>https://x.com/geoffreylitt/status/1889697369337237523#m</link>
      </item>
      <item>
        <title>R to @geoffreylitt: 10/ There&apos;s a second move I find more subtle and interesting:

While maintaining my previous speed of prototyping, I can build at much higher quality.</title>
        <dc:creator>@geoffreylitt</dc:creator>
        <description><![CDATA[<p>10/ There's a second move I find more subtle and interesting:<br>
<br>
While maintaining my previous speed of prototyping, I can build at much higher quality.</p>
<img src="https://x.com/pic/media%2FGjmIL2TW8AAUJVQ.jpg" style="max-width:250px;" />]]></description>
        <pubDate>Wed, 12 Feb 2025 15:25:35 GMT</pubDate>
        <guid>https://x.com/geoffreylitt/status/1889697367462392273#m</guid>
        <link>https://x.com/geoffreylitt/status/1889697367462392273#m</link>
      </item>
      <item>
        <title>R to @geoffreylitt: 9/ There&apos;s an obvious here: MOVE FAST üèéÔ∏è. One sentence prompt, make an app, boom you&apos;re done!

This makes for fun demos and can be useful for random throwaway tools...

But not useful at all when I&apos;m trying to prototype a good UI that hasn&apos;t been made before.</title>
        <dc:creator>@geoffreylitt</dc:creator>
        <description><![CDATA[<p>9/ There's an obvious here: MOVE FAST üèéÔ∏è. One sentence prompt, make an app, boom you're done!<br>
<br>
This makes for fun demos and can be useful for random throwaway tools...<br>
<br>
But not useful at all when I'm trying to prototype a good UI that hasn't been made before.</p>
<img src="https://x.com/pic/media%2FGjmGCw5XcAAQbfw.jpg" style="max-width:250px;" />]]></description>
        <pubDate>Wed, 12 Feb 2025 15:25:35 GMT</pubDate>
        <guid>https://x.com/geoffreylitt/status/1889697365453308211#m</guid>
        <link>https://x.com/geoffreylitt/status/1889697365453308211#m</link>
      </item>
      <item>
        <title>R to @geoffreylitt: 8/ From my personal experience, AI *significantly* pushes out the speed-quality frontier for rapidly prototyping web UIs in React.

(I mainly use Cursor Composer w/ 3.5-sonnet, plus a smattering of other tools)

The question is: what do we do with this power?</title>
        <dc:creator>@geoffreylitt</dc:creator>
        <description><![CDATA[<p>8/ From my personal experience, AI *significantly* pushes out the speed-quality frontier for rapidly prototyping web UIs in React.<br>
<br>
(I mainly use Cursor Composer w/ 3.5-sonnet, plus a smattering of other tools)<br>
<br>
The question is: what do we do with this power?</p>
<img src="https://x.com/pic/media%2FGjmH5-_XIAAYr2s.jpg" style="max-width:250px;" />]]></description>
        <pubDate>Wed, 12 Feb 2025 15:25:34 GMT</pubDate>
        <guid>https://x.com/geoffreylitt/status/1889697363268161595#m</guid>
        <link>https://x.com/geoffreylitt/status/1889697363268161595#m</link>
      </item>
      <item>
        <title>R to @geoffreylitt: 7/ Let&apos;s first address the üíº Land of proper engineering.

Maybe AI helps you move faster at constant quality? Maybe your codebase turns to slop and things are terrible?

Honestly I have no idea! Not the topic here. Let&apos;s move on to the wild west where I typically operate.</title>
        <dc:creator>@geoffreylitt</dc:creator>
        <description><![CDATA[<p>7/ Let's first address the üíº Land of proper engineering.<br>
<br>
Maybe AI helps you move faster at constant quality? Maybe your codebase turns to slop and things are terrible?<br>
<br>
Honestly I have no idea! Not the topic here. Let's move on to the wild west where I typically operate.</p>
<img src="https://x.com/pic/media%2FGjmE024XsAA1tHa.png" style="max-width:250px;" />]]></description>
        <pubDate>Wed, 12 Feb 2025 15:25:34 GMT</pubDate>
        <guid>https://x.com/geoffreylitt/status/1889697361301045716#m</guid>
        <link>https://x.com/geoffreylitt/status/1889697361301045716#m</link>
      </item>
      <item>
        <title>R to @geoffreylitt: 6/ ok, now we&apos;re ready to discuss AI.

The green line is my extremely scientific estimate of how AI support moves the boundary today.</title>
        <dc:creator>@geoffreylitt</dc:creator>
        <description><![CDATA[<p>6/ ok, now we're ready to discuss AI.<br>
<br>
The green line is my extremely scientific estimate of how AI support moves the boundary today.</p>
<img src="https://x.com/pic/media%2FGjmEainXIAAbkYC.jpg" style="max-width:250px;" />]]></description>
        <pubDate>Wed, 12 Feb 2025 15:25:34 GMT</pubDate>
        <guid>https://x.com/geoffreylitt/status/1889697359371661358#m</guid>
        <link>https://x.com/geoffreylitt/status/1889697359371661358#m</link>
      </item>
      <item>
        <title>R to @geoffreylitt: 5/ The thing is...code quality still matters out here!

A well-built prototype often provides better signal by holding up to real use, and makes it easier to try out new ideas.

I think a lot about surfing the speed/quality tradeoff here and trying to push the boundary.</title>
        <dc:creator>@geoffreylitt</dc:creator>
        <description><![CDATA[<p>5/ The thing is...code quality still matters out here!<br>
<br>
A well-built prototype often provides better signal by holding up to real use, and makes it easier to try out new ideas.<br>
<br>
I think a lot about surfing the speed/quality tradeoff here and trying to push the boundary.</p>
<img src="https://x.com/pic/media%2FGjmFYRnWsAAwWUI.png" style="max-width:250px;" />]]></description>
        <pubDate>Wed, 12 Feb 2025 15:25:33 GMT</pubDate>
        <guid>https://x.com/geoffreylitt/status/1889697357438005413#m</guid>
        <link>https://x.com/geoffreylitt/status/1889697357438005413#m</link>
      </item>
      <item>
        <title>R to @geoffreylitt: 4/ But personally... I&apos;m usually out in the ü§† Wild west of UI prototyping! (I research tools for thought and programming interfaces.)

Here there&apos;s a min *speed*: try many ideas, discard most. Which implies a quality *ceiling* - no time to engineer perfectly.</title>
        <dc:creator>@geoffreylitt</dc:creator>
        <description><![CDATA[<p>4/ But personally... I'm usually out in the ü§† Wild west of UI prototyping! (I research tools for thought and programming interfaces.)<br>
<br>
Here there's a min *speed*: try many ideas, discard most. Which implies a quality *ceiling* - no time to engineer perfectly.</p>
<img src="https://x.com/pic/media%2FGjmCbIEW4AEuil1.jpg" style="max-width:250px;" />]]></description>
        <pubDate>Wed, 12 Feb 2025 15:25:33 GMT</pubDate>
        <guid>https://x.com/geoffreylitt/status/1889697355559039232#m</guid>
        <link>https://x.com/geoffreylitt/status/1889697355559039232#m</link>
      </item>
      <item>
        <title>R to @geoffreylitt: 3/ if you&apos;re in the üíº Land of proper engineering (production engineering), you&apos;re gonna impose some minimum quality bar, which in turn imposes a speed limit.</title>
        <dc:creator>@geoffreylitt</dc:creator>
        <description><![CDATA[<p>3/ if you're in the üíº Land of proper engineering (production engineering), you're gonna impose some minimum quality bar, which in turn imposes a speed limit.</p>
<img src="https://x.com/pic/media%2FGjmCTzNWQAANUqz.jpg" style="max-width:250px;" />]]></description>
        <pubDate>Wed, 12 Feb 2025 15:25:32 GMT</pubDate>
        <guid>https://x.com/geoffreylitt/status/1889697353398915147#m</guid>
        <link>https://x.com/geoffreylitt/status/1889697353398915147#m</link>
      </item>
      <item>
        <title>R to @geoffreylitt: 2/ first, some preliminaries before we talk AI:

for anyone building software, there&apos;s some tradeoff between speed and code quality. (obviously you can work to push the frontier, but the tradeoff exists)</title>
        <dc:creator>@geoffreylitt</dc:creator>
        <description><![CDATA[<p>2/ first, some preliminaries before we talk AI:<br>
<br>
for anyone building software, there's some tradeoff between speed and code quality. (obviously you can work to push the frontier, but the tradeoff exists)</p>
<img src="https://x.com/pic/media%2FGjmBZgSWsAAqg17.jpg" style="max-width:250px;" />]]></description>
        <pubDate>Wed, 12 Feb 2025 15:25:32 GMT</pubDate>
        <guid>https://x.com/geoffreylitt/status/1889697351192776879#m</guid>
        <link>https://x.com/geoffreylitt/status/1889697351192776879#m</link>
      </item>
      <item>
        <title>1/ here&apos;s a visual model for how AI support makes me better at UI prototyping

with the surprising conclusion that AI may *improve* code quality in some specific cases!

lets walk thru it step by step...</title>
        <dc:creator>@geoffreylitt</dc:creator>
        <description><![CDATA[<p>1/ here's a visual model for how AI support makes me better at UI prototyping<br>
<br>
with the surprising conclusion that AI may *improve* code quality in some specific cases!<br>
<br>
lets walk thru it step by step...</p>
<img src="https://x.com/pic/media%2FGjmBFGTWMAAGlxb.jpg" style="max-width:250px;" />]]></description>
        <pubDate>Wed, 12 Feb 2025 15:25:31 GMT</pubDate>
        <guid>https://x.com/geoffreylitt/status/1889697349233987656#m</guid>
        <link>https://x.com/geoffreylitt/status/1889697349233987656#m</link>
      </item>
      <item>
        <title>R to @geoffreylitt: notably i was still pretty involved in the details here - decided the strategy, reviewed the plan, reviewed the code... and yet, still probably saved me at least 15min, maybe more? 

i love staying in the flow of UI ideas and not needing to activate math brain</title>
        <dc:creator>@geoffreylitt</dc:creator>
        <description><![CDATA[<p>notably i was still pretty involved in the details here - decided the strategy, reviewed the plan, reviewed the code... and yet, still probably saved me at least 15min, maybe more? <br>
<br>
i love staying in the flow of UI ideas and not needing to activate math brain</p>]]></description>
        <pubDate>Tue, 11 Feb 2025 18:12:55 GMT</pubDate>
        <guid>https://x.com/geoffreylitt/status/1889377090148958602#m</guid>
        <link>https://x.com/geoffreylitt/status/1889377090148958602#m</link>
      </item>
      <item>
        <title>R to @geoffreylitt: still learning how to use reasoning models, but i tried to give a good set of constraints on the answer here, and also made sure to agree on a plan before coding. (helped me catch a possible bug ahead of time!)</title>
        <dc:creator>@geoffreylitt</dc:creator>
        <description><![CDATA[<p>still learning how to use reasoning models, but i tried to give a good set of constraints on the answer here, and also made sure to agree on a plan before coding. (helped me catch a possible bug ahead of time!)</p>
<img src="https://x.com/pic/media%2FGjhpR4HXAAEvrFU.jpg" style="max-width:250px;" />
<img src="https://x.com/pic/media%2FGjhpTN0WQAAR_Za.jpg" style="max-width:250px;" />]]></description>
        <pubDate>Tue, 11 Feb 2025 18:08:35 GMT</pubDate>
        <guid>https://x.com/geoffreylitt/status/1889375997713416359#m</guid>
        <link>https://x.com/geoffreylitt/status/1889375997713416359#m</link>
      </item>
      <item>
        <title>a tiny example of how AI speeds up UI prototyping:

just used cursor composer + o3-mini to speed up a huge table with virtualized rendering. took a couple mins, worked on first try.

no detour into math puzzles, no searching for a library. keeps me in flow!</title>
        <dc:creator>@geoffreylitt</dc:creator>
        <description><![CDATA[<p>a tiny example of how AI speeds up UI prototyping:<br>
<br>
just used cursor composer + o3-mini to speed up a huge table with virtualized rendering. took a couple mins, worked on first try.<br>
<br>
no detour into math puzzles, no searching for a library. keeps me in flow!</p>]]></description>
        <pubDate>Tue, 11 Feb 2025 18:07:40 GMT</pubDate>
        <guid>https://x.com/geoffreylitt/status/1889375768632856778#m</guid>
        <link>https://x.com/geoffreylitt/status/1889375768632856778#m</link>
      </item>

  </channel>
</rss>
